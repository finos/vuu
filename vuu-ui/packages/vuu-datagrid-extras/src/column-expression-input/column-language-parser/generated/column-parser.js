// This file was generated by lezer-generator. You probably shouldn't edit it.
import {LRParser} from "@lezer/lr"
export const parser = LRParser.deserialize({
  version: 14,
  states: "%^OVQPOOOhQPO'#C^OVQPO'#CaQ!]QPOOO!kQPO'#CiO!pQPO'#ClOOQO'#Cs'#CsO!uQPO,58{OVQPO,59OOVQPO,59OOVQPO,59TOVQPO'#CnOOQO,59W,59WOOQO1G.g1G.gOOQO1G.j1G.jO#WQPO1G.jO#xQPO'#CjO$aQPO1G.oO$fQPO,59YOOQO'#Ck'#CkOVQPO,59UOVQPO7+$ZOVQPO'#CoO$zQPO1G.tOOQO1G.t1G.tO%SQPO1G.pO%eQPO<<GuO%vQPO,59ZOOQO-E6m-E6mOOQO7+$`7+$`OVQPOAN=aO&[QPOG22{OOQOLD(gLD(g",
  stateData: "&m~OfOS~ORUOSUOUQOhPOiSO~OUaXXQXYQXZQX[QXdQXVQXjQXkQXlQXmQX~OXWOYWOZXO[XO~OUYO~OUZO~OV]OXWOYWOZXO[XO~OXWOYWOZWi[WidWiVWijWikWilWimWi~OXWOYWOZXO[XOjcOkcOlcO~OmeO~OVhOXWOYWOZXO[XOmfO~OVmOmfO~OXWOYWOZXO[XOm^i~OXWOYWOZXO[XOmnO~OXWOYWOZXO[XOVcamca~OVpOXWOYWOZXO[XO~O",
  goto: "#QhPPiPPiPPiPPPPiuxi{!X![PPP!beUOQWXYZdefnRaYRd`eTOQWXYZdefnR[TQgbRlgQROQVQQ^WQ_XQ`YQbZQidQjeQkfRon",
  nodeNames: "âš  ColumnDefinitionExpression Column Number String ParenthesizedExpression OpenBrace CloseBrace BinaryExpression Divide Times Plus Minus ConditionalExpression Condition Operator CallExpression Function ArgList",
  maxTerm: 29,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "&]~RfXY!gYZ!g]^!gpq!grs!xxy#ayz#fz{#k{|#p|}#u}!O#z!O!P$P!P!Q$_!Q![$d!^!_$o!_!`$t!`!a$y!c!}%O#R#S%O#T#]%O#]#^%a#^#o%O~!lSf~XY!gYZ!g]^!gpq!g~!{Trs#[!Q![!x!c!}!x#R#S!x#T#o!x~#aOS~~#fOU~~#kOV~~#pOY~~#uOZ~~#zOm~~$PO[~~$SP!Q![$V~$[PR~!Q![$V~$dOX~~$iQR~!O!P$V!Q![$d~$tOl~~$yOj~~%OOk~~%TSh~!Q![%O!c!}%O#R#S%O#T#o%O~%fUh~!Q![%O!c!}%O#R#S%O#T#Y%O#Y#Z%x#Z#o%O~&PSi~h~!Q![%O!c!}%O#R#S%O#T#o%O",
  tokenizers: [0],
  topRules: {"ColumnDefinitionExpression":[0,1]},
  tokenPrec: 0
})
